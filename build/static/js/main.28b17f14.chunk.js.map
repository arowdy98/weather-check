{"version":3,"sources":["fetchPlace.js","App.js","index.js"],"names":["fetchPlace","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","text","res","wrap","_context","prev","next","fetch","concat","process","sent","ok","Error","statusText","abrupt","json","t0","error","stop","_x","apply","arguments","api","App","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","weather","setWeather","_useState5","_useState6","autocompleteCities","setAutocompleteCities","handleCityChange","e","target","value","includes","features","map","place","place_name","_jsx","className","main","temp","children","_jsxs","list","type","placeholder","onChange","onKeyPress","evt","key","then","result","pattern","join","autoComplete","id","city","i","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28b17f14.chunk.js","sourcesContent":["export const fetchPlace = async (text) => {\n  try {\n    const res = await fetch(\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${text}.json?access_token=${process.env.REACT_APP_MAP_API_KEY}&cachebuster=1625641871908&autocomplete=true&types=place`\n    );\n    if (!res.ok) throw new Error(res.statusText);\n    return res.json();\n  } catch (err) {\n    return { error: \"Unable to retrieve places\" };\n  }\n};\n","import React, { useState } from 'react';\nimport { fetchPlace } from './fetchPlace';\nconst api = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          setAutocompleteCities([]);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  const handleCityChange = async (e) => {\n    setQuery(e.target.value);\n    if (!e.target.value) return;\n\n    const res = await fetchPlace(e.target.value);\n    !autocompleteCities.includes(e.target.value) &&\n      res.features &&\n      setAutocompleteCities(res.features.map((place) => place.place_name));\n  };\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input \n            list=\"places\"\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={handleCityChange}\n            value={query}\n            onKeyPress={search}\n            pattern={autocompleteCities.join(\"|\")}\n            autoComplete=\"off\"\n          />\n          <datalist id=\"places\">\n            {autocompleteCities.map((city, i) => (\n              <option key={i}>{city}</option>\n            ))}\n          </datalist>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°c\n            </div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}